midpoint_A fail:
I used 2147483647 and -3 to fail midpoint_A test. 
It failed because 2147483647 is 0b0111 1111 1111 1111 1111 1111 1111 1111 
and -3 is 0b1111 1111 1111 1111 1111 1111 1111 1101. 
so the midpoint of 2147483647 and -3 is expected to be 
0b0011 1111 1111 1111 1111 1111 1111 1110 = 1073741822.
 
However, midpoint_A failed when it computes [y-x] because its result is 
0b 0011 1111 1111 1111 1111 1111 1111 1110 - 0b0111 1111 1111 1111 1111 1111 1111 1111 = 01111111 1111 1111 1111 1111 1111 1110 = 2147483646. Which is not correct.
Because the value is less than INT_MIN value(-2147483648)1000 0000 0000 0000 0000 0000 0000 0000, so it is converted to (2147483646)
01111111 1111 1111 1111 1111 1111 1110 when we subtract it. 
Therefore (y-x)/2 = 0011 1111 1111 1111 1111 1111 1111 1111.
And the mid point using midpoint_A (x + (y-x)/2)is 0b0111 1111 1111 1111 1111 1111 1111 1111 + 01111111 1111 1111 1111 1111 1111 1110 is also exceeding 
INT_MAX, so the final ouput failed as well.

midpoint_B fail:
I used -1000000 and -2 to fail midpoint_B test.
-1000000 is 0b1111 1111 1111 0000 1011 1101 1100 0000 
-2 is 0b111 11111 1111 1111 1111 1111 1111 1110.
So the midpoint of -1000000 and -2 is -500001 = 1111 1111 1111 1000 0101 1110 1101 1111.
0b1111 1111 1111 0000 1011 1101 1100 0000 + 0b111 11111 1111 1111 1111 1111 1111 1110 = 1111 1111 1111 0000 1011 1101 1011 1110
Right shift 1111 1111 1111 0000 1011 1101 1011 1110 is 0111 1111 1111 1000 0101 1110 1101 1111
This is not equal to our calculated midpoint.
Therefore, having a negative input will fail on midpoint_B. Because negative number starts with 1 and if we operate a right shift, the leading number will become 0, 0 is positive so it does not output our expected midpoint.

