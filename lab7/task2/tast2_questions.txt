1.What instruction is “int a, b, c, d;” converted to? 

subl $16,%esp

2.Does “int a, b, c, d;” shrink or grow the stack? How many bytes are allocated on stack for a, b, c, and d? Explain them using instruction from question 1.

It grows the stack. 16 bytes are allocated on stack for a, b, d and d. Since "subl $16,%esp" means subtract 16 bytes from esp. And the stack is going upside down, so subtracting the size acctually grows the stack.

3.What instruction is “b=2;” converted to? How is the address of variable b formed in the instruction?

movl $2,-8(%ebp), the address of variable b allocated 8 bytes from the original top of the stack stored in ebp.

4.Based on the instructions converted from four assignments, can we claim the declaration order determines the allocation order? For instance, a is declared before b, does it mean a is to be allocated before b on stack? Verify your theory by changing the declaration to “int a, c, b, d;”

The declaration order does determines the allocation order. Because when I change th declaration to "int d, b, c, a;", the assembly code for assignments changed to 
	"        
	movl $1,-16(%ebp)
        movl $2,-8(%ebp)
        movl $3,-12(%ebp)
        movl $4,-4(%ebp) "
now a is allocated at -16 from %ebp instead of -4 from %ebp, which is on top of the stack after execution.
